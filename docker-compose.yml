version: '3.8'
services:
  mysql:
    container_name: database
    build:
      context: ./mysql
    image: bot-detector/mysql:latest
    environment:
      - MYSQL_ROOT_PASSWORD=root_bot_buster
    volumes:
      - ./mysql/docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d
      # - ./mysql/mount:/var/lib/mysql # creates persistence
    ports:
      - 3307:3306
    networks:
      - botdetector-network
    healthcheck:
      test: ["CMD", "mysqladmin" ,"ping", "-h", "localhost"]
      timeout: 20s
      retries: 10

  mysql_setup:
    container_name: mysql_setup
    image: bot-detector/mysql_setup
    build:
      context: ./mysql_setup
    command: ["python", "-u","setup_mysql.py"]
    networks:
      - botdetector-network
    depends_on:
      mysql:
        condition: service_healthy
  
  core_api:
    image: quay.io/bot_detector/bd-core-files:acf5de4
    command: uvicorn src.core.server:app --host 0.0.0.0 --reload --reload-include src/*
    environment:
      - sql_uri=mysql+asyncmy://root:root_bot_buster@mysql:3306/playerdata
      - discord_sql_uri=mysql+asyncmy://root:root_bot_buster@mysql:3306/discord
      - token=verify_ban
    # Ports exposed to the other services but not to the host machine
    expose:
      - 5000
    ports:
      - 5001:5000
    networks:
      - botdetector-network
    depends_on:
      - mysql

  private_api:
    image: quay.io/bot_detector/private-api:4d70b82
    command: uvicorn src.core.server:app --host 0.0.0.0 --reload --reload-include src/*
    # Ports exposed to the other services but not to the host machine
    expose: 
      - 5000
    ports:
      - 5002:5000
    networks:
      - botdetector-network
    # this overrides the env_file for the specific variable
    environment:
      - KAFKA_HOST=kafka:9092
      - DATABASE_URL=mysql+aiomysql://root:root_bot_buster@mysql:3306/playerdata
      - ENV=DEV
      - POOL_RECYCLE=60
      - POOL_TIMEOUT=30
    depends_on:
      - mysql

  machine_learning:
    container_name: bd-ml
    build:
      context: .
      dockerfile: Dockerfile
      target: base
      args:
        root_path: /
        api_port: 8000
    command: uvicorn api.app:app --host 0.0.0.0 --reload --reload-include api/*
    environment:
      - token = verify_ban
      - secret_token = super_secret_token
      - private_api = private_api:5000
      - detector_api = core_api:5000
    volumes:
      - ./api:/project/api
    ports:
      - 8000:8000
    networks:
      - botdetector-network
    depends_on:
      - private_api
      - core_api

networks:
  botdetector-network:
